@page "/all-people"
@inject NavigationManager NavigationManager

<PageTitle>All People</PageTitle>
<h1>All People</h1>
@if (People == null)
{
    <p>
        <em>
            Data will be shown here. Please go to the
            <NavLink href="/">homepage</NavLink>
            to upload and analyze a file.
        </em>
    </p>
}
else
{
<div class="input-group rounded">

    @if (searching)
    {
        <span class="input-group-text border-0" id="search-addon">
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        </span>
    }
    else
    {
        <span class="input-group-text border-0" id="search-addon">
            <span class="oi oi-magnifying-glass"></span>
        </span>
    }
    <input type="search" class="form-control rounded" placeholder="Search" aria-label="Search" aria-describedby="search-addon" onchange="@OnSearchChanged" />


</div>
    <table class="table">
        <thead>
            <tr>
                <th>Last Name</th>
                <th>First Name</th>
                <th>UUID</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in People)
            {
                <tr class="clickable-table" onclick="@(() => OpenPerson(item.Id))">
                    <td>@item.LastName</td>
                    <td>@item.FirstName</td>
                    <td>@item.Id</td>
                </tr>

            }
        </tbody>
    </table>
}

@code {

    IEnumerable<Person>? People = MainData.Tree?.Persons.OrderBy(x => x.LastName).ThenBy(x => x.FirstName);
    CancellationTokenSource CancelSource = new CancellationTokenSource();
    Task? CurrentSearch;
    bool searching = false;

    async void OnSearchChanged(ChangeEventArgs e)
    {
        await UpdateSearch(e.Value as string);
    }

    async Task UpdateSearch(string? str)
    {
        searching = true;
        StateHasChanged();
        await Task.Yield();
        if (string.IsNullOrEmpty(str))
        {
            People = MainData.Tree?.Persons.OrderBy(x => x.LastName).ThenBy(x => x.FirstName);
            return;
        }
        string search = str.ToLower();
        People = from person in MainData.Tree.Persons
                 orderby Fuzz.TokenSetRatio(search,
                 ((person.FirstName ?? "") + " " + (person.LastName ?? "")).ToLower()) descending
                 select person;
        searching = false;
        StateHasChanged();
    }

    void OpenPerson(string id)
    {
        Person? p = MainData.Tree.Persons.Find(x =>
        {
            Console.WriteLine(x.Id);
            return x.Id.Equals(id);
        });
        if (p != null)
        {
            NavigationManager.NavigateTo(string.Format("view-person/{0}", p.Id));
        }
    }
    }