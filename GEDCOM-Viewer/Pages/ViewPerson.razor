@page "/view-person/{Id?}"
@using System.Text

@if (Person == null)
{
    <PageTitle>View Person</PageTitle>
    if (MainData.Tree == null)
    {
        <p>
            <em>
                Data will be shown here. Please go to the
                <NavLink href="">homepage</NavLink>
                to upload and analyze a file.
            </em>
        </p>
    }
    else
    {
        <p>
            <em>
                Please select a person in
                <NavLink href="all-people">All People</NavLink>
                to see their information.
            </em>
        </p>
    }

}
else
{
    <PageTitle>@Person.FirstName @Person.LastName</PageTitle>
    <h1>@Person.FirstName @Person.LastName</h1>
    @DrawSimpleItem("Gender", Person.Gender)
    @DrawDatePlace("Birth", Person.Birth)
    @DrawSimpleItem("Birth Notes" ,Person.Birth?.Note)
    @DrawDatePlace("Adoption", Person.Adoption?.DatePlace)
    @DrawSimpleItem("Adoption Type", Person.Adoption?.Type)
    @DrawSimpleItem("Adoption Notes", Person.Adoption?.Note)
    @DrawDatePlace("Death", Person.Death)
    @DrawSimpleItem("Death Notes", Person.Death?.Note) @*Kira time*@
    @DrawDatePlace("Buried", Person.Buried)
    @DrawSimpleItem("Burial Notes", Person.Buried?.Note)
    @DrawPersonList("Parents", from relation in MainData.Tree.ChildRelations where relation.From.Id == Person.Id group relation by relation.To into sorted select sorted.First().To)
    @DrawPersonList("Children", from relation in MainData.Tree.ChildRelations where relation.To.Id == Person.Id group relation by relation.From into sorted select sorted.First().From)
    @DrawPersonList("Siblings", from relation in MainData.Tree.SiblingRelations where relation.From.Id == Person.Id group relation by relation.To into sorted select sorted.First().To)
    @DrawPersonList("Spouse", from relation in MainData.Tree.SpouseRelations where relation.From.Id == Person.Id group relation by relation.To into sorted select sorted.First().To)
    @DrawDatePlace("Baptized", Person.Baptized)
    @DrawSimpleItem("Baptization Notes", Person.Baptized?.Note)
    @DrawSimpleItem("Education", Person.Education)
    @DrawSimpleItem("Religion", Person.Religion)
    @DrawSimpleItem("Changed", Person.Changed)
    @DrawSimpleItem("Occupation", Person.Occupation)
    @DrawSimpleItem("Health", Person.Health)
    @DrawSimpleItem("Title", Person.Title)
    @DrawSimpleItem("Address", CommaSeparatedString(Person.Address?.Street, Person.Address?.City, Person.Address?.State, Person.Address?.Country, Person.Address?.ZipCode))
    @DrawDatePlace("Residence", Person.Residence)
    @DrawDatePlaceList("Emigrated", Person.Emigrated)
    @DrawDatePlaceList("Immigrated", Person.Immigrated)
    @DrawDatePlace("Becoming Citizen", Person.BecomingCitizen)
    @DrawDatePlace("Graduation", Person.Graduation);
    @DrawSimpleItem("Phone", CommaSeparatedString(Person.Address?.Phone))
    @DrawSimpleItem("Fax", CommaSeparatedString(Person.Address?.Fax))
    @DrawSimpleItem("Email", CommaSeparatedString(Person.Address?.Email))
    @DrawSimpleItem("Web", CommaSeparatedString(Person.Address?.Web))
    @DrawSimpleItem("Notes", Person.Note, newLine:true)
    @DrawUnknownFormatDatePlaceList("Extras", Person.Extras)

}


@code {
    [Parameter]
    public string? Id { get; set; }
    private Person? Person;

    protected override void OnParametersSet()
    {
        if (MainData.Tree != null)
        {
            Person = MainData.Tree.Persons.Find((x) => Id == x.Id);
        }
    }

    RenderFragment? DrawSimpleItem(string title, string? str, bool newLine = false)
    {
        if (!string.IsNullOrWhiteSpace(str))
        {
            return @<InfoItem Title="@title" InfoOnNewLine="@newLine">@str</InfoItem>;
        }
        return null;
    }

    RenderFragment? DrawPersonList(string title, IEnumerable<Person> people)
    {
        if (people != null && people.Count() > 0)
        {
            return 
            @<InfoItem Title="@title">
                    @foreach (var person in people)
                    {
                        <PersonRefItem Person="@person" />
                        <span>&nbsp;</span>
                    }           
            </InfoItem>;
        }
        return null;
    }

    RenderFragment? DrawDatePlace(string title, DatePlace? dp)
    {
        if (dp == null)
            return null;
        string s = string.Format("Date: {0}, Place: {1}", dp.Date ?? "Unknown", dp.Place ?? "Unknown");
        return @<InfoItem Title="@title">@s</InfoItem>
    ;
    }

    RenderFragment? DrawDatePlaceList(string title, IEnumerable<DatePlace?>? dpList)
    {
        if (dpList == null || dpList.Count() == 0)
            return null;
        List<string> s = new();
        foreach (DatePlace? dp in dpList)
        {
            if (dp == null)
                continue;
            s.Add(string.Format("Date: {0}, Place: {1}<br/>", dp.Date ?? "Unknown", dp.Place ?? "Unknown"));
        }
         return @<InfoItem Title="@title" InfoOnNewLine="true">
            @foreach (var str in s)
            {
                @str
                <br/>
            }
        </InfoItem>
    ;
    }

    RenderFragment? DrawUnknownFormatDatePlaceList(string title, IEnumerable<string?>? dpList)
    {
        if (dpList == null || dpList.Count() == 0)
            return null;
        List<string> s = new();
        foreach (string? dp in dpList)
        {
            if (string.IsNullOrWhiteSpace(dp))
                continue;
            s.Add(dp);

        }
        if (s.Count == 0)
            return null;
        return 
    @<InfoItem Title="@title" InfoOnNewLine="true">
            @foreach (var str in s)
            {
                @str
                <br/>
            }
        </InfoItem>;
    }

    static string CommaSeparatedString(params string?[] items)
    {
        StringBuilder s = new StringBuilder();
        foreach (string str in items)
        {
            if (str != null)
                s.AppendFormat("{0}, ", str);
        }
        if (s.Length >= 2)
        {
            s.Remove(s.Length - 2, 2);
        }
        return s.ToString();
    }

    static string CommaSeparatedString(IEnumerable<string?>? items)
    {
        StringBuilder s = new StringBuilder();
        if (items != null)
        {
            foreach (string? str in items)
            {
                if (str != null)
                    s.AppendFormat("{0}, ", str);
            }
        }
        if (s.Length >= 2)
        {
            s.Remove(s.Length - 2, 2);
        }
        return s.ToString();
    }
}

