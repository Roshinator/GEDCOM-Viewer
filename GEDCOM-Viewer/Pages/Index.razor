@page "/"
@inject IJSRuntime JS

<PageTitle>Viewer</PageTitle>

<h1>Browse People</h1>
<Notice Title="Privacy Notice:" Text="Files will not be stored on a server. All processing happens only on your device." />

<h2>Step 1: Open a GEDCOM File</h2>
<InputFile OnChange="@OpenFile">Choose File</InputFile>
<br>

<h2>Step 2: Analyze it</h2>
<button type="button" class="btn btn-primary" onclick="@AnalyzeFile">Analyze File</button>
<br>

<h2>Step 3: Results:</h2>
@if (MainData.Tree == null)
{
    <p><em>Data will be shown here</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Last Name</th>
                <th>First Name</th>
                <th>UUID</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in MainData.Tree.Persons.OrderBy(x => x.LastName).ThenBy(x => x.FirstName))
            {
                <tr class="clickable-table" onclick="@(() => OpenPerson(item.Id))">
                    <td>@item.LastName</td>
                    <td>@item.FirstName</td>
                    <td>@item.Id</td>
                </tr>
                
            }
        </tbody>
    </table>
}

@code
{
    IBrowserFile? file;
    string OutputText = "Output will appear here";

    void OpenFile(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    async void AnalyzeFile()
    {
        if (file == null)
        {
            var obj = new
            {
                title = "Error",
                text = "Please select a file",
                icon = "error",
                confirmButtonText = "OK"
            };
            await JS.InvokeAsync<object>("Swal.fire", obj);
            return;
        }
        var loadedFile = file;
        StreamReader streamReader = new StreamReader(loadedFile.OpenReadStream());
        List<string> fileData = new List<string>();
        string? temp;
        temp = await streamReader.ReadLineAsync();
        while (temp != null)
        {
            fileData.Add(temp);
            temp = await streamReader.ReadLineAsync();
        }
        MainData.Tree = FileParser.ParseLines(fileData);
        foreach (var warning in MainData.Tree.Warnings)
        {
            Console.WriteLine("WARNING: " + warning);
        }
        foreach (var error in MainData.Tree.Errors)
        {
            Console.WriteLine("ERROR: " + error);
        }
        Console.WriteLine("Result: " + MainData.Tree.Persons.Count);
        StateHasChanged();
    }

    void OpenPerson(string id)
    {
        Person? p = MainData.Tree.Persons.Find(x => 
            {
                Console.WriteLine(x.Id);
                return x.Uid.Equals(id);
            });
        if (p != null)
        {
            Console.WriteLine("Opened Person " + p.FirstName + " " + p.LastName);
        }
    }
}