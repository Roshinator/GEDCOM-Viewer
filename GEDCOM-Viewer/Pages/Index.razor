@page "/"
@inject IJSRuntime JS

<PageTitle>Viewer</PageTitle>

<h1>Analyze a File</h1>
<Notice Title="Privacy Notice:" Text="Files will not be uploaded or stored on a server. All processing happens only on your device." />

<h2 class="mb-2">Step 1: Open a GEDCOM File</h2>
<InputFile class="mb-4" OnChange="@OpenFile">Choose File</InputFile>
<br>

<h2 class="mb-2">Step 2: Analyze it</h2>

@if (analyzing)
{
    <button type="button" class="btn btn-primary mb-4" onclick="@AnalyzeFile" disabled>
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        Analyzing File
    </button>
}
else
{
    <button type="button" class="btn btn-primary mb-4" onclick="@AnalyzeFile">
        Analyze File
    </button>
}

@code
{
    IBrowserFile? file;
    string OutputText = "Output will appear here";
    bool analyzing = false;

    void OpenFile(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    async void AnalyzeFile()
    {
        analyzing = true;
        if (file == null)
        {
            var obj = new
            {
                title = "Error",
                text = "Please select a file",
                icon = "error",
                confirmButtonText = "OK",
                customClass = new { confirmButton = "btn btn-primary" },
                buttonsStyling = false
            };
            await JS.InvokeAsync<object>("Swal.fire", obj);
            return;
        }
        var loadedFile = file;
        StreamReader streamReader = new StreamReader(loadedFile.OpenReadStream());
        List<string> fileData = new List<string>();
        string? temp;
        temp = await streamReader.ReadLineAsync();
        while (temp != null)
        {
            fileData.Add(temp);
            temp = await streamReader.ReadLineAsync();
        }
        MainData.Tree = FileParser.ParseLines(fileData);
        foreach (var warning in MainData.Tree.Warnings)
        {
            Console.WriteLine("WARNING: " + warning);
        }
        foreach (var error in MainData.Tree.Errors)
        {
            Console.WriteLine("ERROR: " + error);
        }
        Console.WriteLine("Result: " + MainData.Tree.Persons.Count);
        analyzing = false;
        StateHasChanged();
        var succNotif = new
        {
            title = "Success",
            text = string.Format("Found {0} errors and {1} warnings. You can now browse the data.", MainData.Tree.Errors.Count, MainData.Tree.Warnings.Count),
            icon = "success",
            customClass = new { confirmButton = "btn btn-primary" },
            buttonsStyling = false
        };
        await JS.InvokeAsync<object>("Swal.fire", succNotif);
    }
}